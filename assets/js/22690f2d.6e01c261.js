"use strict";(self.webpackChunkcosc_102_writeups=self.webpackChunkcosc_102_writeups||[]).push([[9375],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),c=r,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||l;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9417:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:1},i="Variable",o={unversionedId:"references/general/variable",id:"references/general/variable",title:"Variable",description:"Labels used for identifying certain types of data.",source:"@site/docs/references/general/variable.mdx",sourceDirName:"references/general",slug:"/references/general/variable",permalink:"/cs102-writeups/docs/references/general/variable",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"Sidebar",previous:{title:"General",permalink:"/cs102-writeups/docs/category/general-1"},next:{title:"Data Types",permalink:"/cs102-writeups/docs/references/general/data-types"}},p={},s=[{value:"Summary",id:"summary",level:2},{value:"Terminology",id:"terminology",level:3},{value:"Usage/Syntax",id:"usagesyntax",level:2},{value:"Example",id:"example",level:4},{value:"Declaration",id:"declaration",level:3},{value:"Assignment",id:"assignment",level:3},{value:"Define/Initialize",id:"defineinitialize",level:3},{value:"Operators",id:"operators",level:3},{value:"Example",id:"example-1",level:4},{value:"Don&#39;t do this",id:"dont-do-this",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Common Naming Conventions",id:"common-naming-conventions",level:4},{value:"Example",id:"example-2",level:4}],m={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"variable"},"Variable"),(0,r.kt)("p",null,"Labels used for identifying certain types of data."),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"A variable is a named location in memory used to store data values. A variable can be used to store a single value or a collection of values. A variable is created when you assign a value to it using the assignment operator ",(0,r.kt)("inlineCode",{parentName:"p"},"="),". The variable name is on the left side of the operator and the value to be stored in the variable is on the right side of the operator."),(0,r.kt)("h3",{id:"terminology"},"Terminology"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Define/Initialize"),(0,r.kt)("th",{parentName:"tr",align:null},"Declare"),(0,r.kt)("th",{parentName:"tr",align:null},"Assign"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"To create a variable ",(0,r.kt)("em",{parentName:"td"},"and")," assign a value to it."),(0,r.kt)("td",{parentName:"tr",align:null},"To create a variable ",(0,r.kt)("em",{parentName:"td"},"without")," assigning a value to it."),(0,r.kt)("td",{parentName:"tr",align:null},"To assign a value to a variable that has already been created.")))),(0,r.kt)("h2",{id:"usagesyntax"},"Usage/Syntax"),(0,r.kt)("p",null,"A variable is made up of three parts:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The data type of the variable"),(0,r.kt)("li",{parentName:"ol"},"The name of the variable"),(0,r.kt)("li",{parentName:"ol"},"The value of the variable")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"<type> <name> = <value>;\n")),(0,r.kt)("h3",{id:"declaration"},"Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int x; // Declare a variable named x of type int\n")),(0,r.kt)("h3",{id:"assignment"},"Assignment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"x = 5; // Assign the value 5 to the variable x\n")),(0,r.kt)("h3",{id:"defineinitialize"},"Define/Initialize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int x = 5; // Declare a variable named x of type int and assign the value 5 to it\n")),(0,r.kt)("h3",{id:"operators"},"Operators"),(0,r.kt)("p",null,"All C++ primitive data types support the following assignment operators:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"=")),(0,r.kt)("td",{parentName:"tr",align:null},"Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x = 5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"+=")),(0,r.kt)("td",{parentName:"tr",align:null},"Addition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x += 5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-=")),(0,r.kt)("td",{parentName:"tr",align:null},"Subtraction"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x -= 5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"*=")),(0,r.kt)("td",{parentName:"tr",align:null},"Multiplication"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x *= 5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/=")),(0,r.kt)("td",{parentName:"tr",align:null},"Division"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x /= 5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"%=")),(0,r.kt)("td",{parentName:"tr",align:null},"Modulus"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x %= 5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"++")),(0,r.kt)("td",{parentName:"tr",align:null},"Increment"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x++"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--")),(0,r.kt)("td",{parentName:"tr",align:null},"Decrement"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x--"))))),(0,r.kt)("p",null,"These operators can be used to perform operations on the value of a variable and subsequently assign the result to the variable."),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int x = 5;\nx += 5; // x is now 10\n")),(0,r.kt)("p",null,"Another way to write this is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int x = 5;\nx = x + 5; // x is now 10\n")),(0,r.kt)("p",null,"But it's more convenient to use the assignment operators."),(0,r.kt)("h3",{id:"dont-do-this"},"Don't do this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int x = 5;\nx + 5; // x is still 5\n")),(0,r.kt)("p",null,"In the above example, the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is not changed because the assignment operator ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," is not used. We add ",(0,r.kt)("inlineCode",{parentName:"p"},"5")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," but we don't assign the result to ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", so we essentially do nothing."),(0,r.kt)("h3",{id:"naming-conventions"},"Naming Conventions"),(0,r.kt)("p",null,"There are two things to consider when creating a variable:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The name of the variable should be descriptive."),(0,r.kt)("li",{parentName:"ol"},"The name of the variable should ",(0,r.kt)("strong",{parentName:"li"},"consistently")," follow ",(0,r.kt)("em",{parentName:"li"},"some")," naming convention.")),(0,r.kt)("admonition",{title:"Naming Conventions",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A naming convention is a set of rules for naming variables, functions, classes, etc. The purpose of a naming convention is to make code more readable and consistent. It really doesn't matter which naming convention you use, ",(0,r.kt)("strong",{parentName:"p"},"as long as you use it consistently."))),(0,r.kt)("h4",{id:"common-naming-conventions"},"Common Naming Conventions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Convention"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Camel Case"),(0,r.kt)("td",{parentName:"tr",align:null},"The first letter of each word is capitalized except for the first word."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"myName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Snake Case"),(0,r.kt)("td",{parentName:"tr",align:null},"Each word is separated by an underscore and all letters are lowercase."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"my_name"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Pascal Case"),(0,r.kt)("td",{parentName:"tr",align:null},"The first letter of each word is capitalized including the first word."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MyName"))))),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int x = 5; // Mostly bad\n\nint numberOfStudents = 5; // good\n")),(0,r.kt)("p",null,"In the above example, the first variable name is not descriptive. It's not clear what ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is supposed to represent. The second variable name is descriptive. It's clear that ",(0,r.kt)("inlineCode",{parentName:"p"},"numberOfStudents")," is supposed to represent the number of students in a class."),(0,r.kt)("p",null,"Sometimes it's appropriate to use arbitary names for variables. For example, when using a loop counter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"for (int i = 0; i < 10; i++) {\n    // Do something\n}\n")),(0,r.kt)("p",null,"In the above example, ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," is a loop counter. It's not important what ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," is called, as long as it's consistent. It's common to use ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," as a loop counter, but you could use any name you want."))}d.isMDXComponent=!0}}]);