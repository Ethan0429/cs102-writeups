"use strict";(self.webpackChunkcosc_102_writeups=self.webpackChunkcosc_102_writeups||[]).push([[1117],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=u(n),m=r,d=g["".concat(s,".").concat(m)]||g[m]||c[m]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9031:(e,t,n)=>{n.d(t,{Z:()=>p});var a,r,i=n(7294),o=n(6010),l=n(9960);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}const u=e=>{let{title:t,titleId:n,...o}=e;return i.createElement("svg",s({fill:"#fff",width:15,height:15,viewBox:"0 0 64 64",xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",style:{fillRule:"evenodd",clipRule:"evenodd",strokeLinejoin:"round",strokeMiterlimit:2},"aria-labelledby":n},o),t?i.createElement("title",{id:n},t):null,i.createElement("path",{style:{fill:"none"},d:"M-896 0H384v800H-896z"}),a||(a=i.createElement("path",{d:"M36.026 20.058H14.934a2.99 2.99 0 0 0-2.989 2.989v25.964A2.99 2.99 0 0 0 14.934 52h26.024a2.99 2.99 0 0 0 2.989-2.989V28.058h3.999v21.948a5.999 5.999 0 0 1-5.995 5.995h-28.01a5.998 5.998 0 0 1-5.995-5.995V22.052a5.997 5.997 0 0 1 5.995-5.995h22.085v4.001Z"})),r||(r=i.createElement("path",{d:"M55.925 25.32H51.92V14.839L24.026 42.732 21.194 39.9l27.895-27.895H38.605V8h17.318l.002.001V25.32Z"})))};function p(e){let{to:t,text:n,className:a}=e;return i.createElement(l.Z,{to:t,className:(0,o.Z)("group",a)},n,i.createElement(u,{className:"ml-0.5 translate-y-0.5 group-hover:fill-[#00ff37]"}))}},5010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(9031);const o={},l="Debugging Segmentation Faults",s={unversionedId:"debugging/segmentation-faults",id:"debugging/segmentation-faults",title:"Debugging Segmentation Faults",description:"What is a Segmentation Fault?",source:"@site/docs/debugging/segmentation-faults.mdx",sourceDirName:"debugging",slug:"/debugging/segmentation-faults",permalink:"/cs102-writeups/docs/debugging/segmentation-faults",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"Sidebar",previous:{title:"Debugging with gdb",permalink:"/cs102-writeups/docs/debugging/gdb"}},u={},p=[{value:"What is a Segmentation Fault?",id:"what-is-a-segmentation-fault",level:2},{value:"Dereferencing a Null Pointer",id:"dereferencing-a-null-pointer",level:3},{value:"Indexing a Vector/Array Out-of-Bounds",id:"indexing-a-vectorarray-out-of-bounds",level:3},{value:"How to Debug Segmentation Faults",id:"how-to-debug-segmentation-faults",level:2},{value:"Using Print Statements",id:"using-print-statements",level:3},{value:"Using GDB",id:"using-gdb",level:3}],g={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"debugging-segmentation-faults"},"Debugging Segmentation Faults"),(0,r.kt)("h2",{id:"what-is-a-segmentation-fault"},"What is a Segmentation Fault?"),(0,r.kt)("p",null,"A segmentation fault is a common error that occurs when a program tries to access a memory location that it is not allowed to access. Segmentation faults are often caused by dereferencing a null pointer, or by trying to access memory that has been freed."),(0,r.kt)("p",null,"Here is an example of a segmentation fault:"),(0,r.kt)("h3",{id:"dereferencing-a-null-pointer"},"Dereferencing a Null Pointer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int main() {\n    int *p = nullptr; // p is a pointer to an integer, and it is initialized to null\n    *p = 5; // This line causes a segmentation fault because p is a null pointer\n    return 0;\n}\n")),(0,r.kt)("p",null,"When we run this program, we get the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ./segfault\nSegmentation fault (core dumped)\n")),(0,r.kt)("p",null,"The segmentation fault occurs when we try to dereference the null pointer ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),". The program tries to access the memory location that ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," points to, but ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," is a null pointer, so it is not allowed to access that memory location."),(0,r.kt)("p",null,"Another common case is indexing a vector out-of-bounds"),(0,r.kt)("h3",{id:"indexing-a-vectorarray-out-of-bounds"},"Indexing a Vector/Array Out-of-Bounds"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3};\n    v[3] = 4; // This line causes a segmentation fault because v only has 3 elements\n    return 0;\n}\n")),(0,r.kt)("h2",{id:"how-to-debug-segmentation-faults"},"How to Debug Segmentation Faults"),(0,r.kt)("h3",{id:"using-print-statements"},"Using Print Statements"),(0,r.kt)("p",null,"One way to debug segmentation faults is to use print statements. Print statements allow you to print the value of variables at different points in your program. This can be useful for finding the line of code that caused the segmentation fault."),(0,r.kt)("p",null,"Let's look at an example of a program that has a segmentation fault:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n  // create a vector of integers\n  vector<int> integers;\n\n  cout << "Adding 10 elements to the vector" << endl;\n\n  // add 10 elements to the vector\n  for (size_t i = 0; i < 10; i++) {\n    integers.push_back(i);\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  // add last element to the first\n  integers[0] = integers[0] + integers[10] // This line causes a segmentation fault;\n\n  cout << "Doubled each element" << endl;\n\n  // double each element\n  for (size_t i = 0; i < 10; i++) {\n    integers[i] = integers[i] * 2;\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  return 0;\n}\n')),(0,r.kt)("p",null,"This line causes a segmentation fault because we are trying to access the 11th element of the vector, but the vector only has 10 elements:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"integers[0] += integers[10];\n")),(0,r.kt)("p",null,"When we run this program, we get the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\n$ ./segfault\nAdding 10 elements to the vector\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nSegmentation fault (core dumped)\n")),(0,r.kt)("p",null,"Notice that the program crashes before it prints out the line ",(0,r.kt)("inlineCode",{parentName:"p"},"Doubled each element"),". This is because the program crashes when it tries to access the 11th element of the vector. To find the line of code that caused the segmentation fault, we can add print statements to the program:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'int main() {\n  // create a vector of integers\n  vector<int> integers;\n\n  cout << "Adding 10 elements to the vector" << endl;\n\n  // add 10 elements to the vector\n  for (size_t i = 0; i < 10; i++) {\n    integers.push_back(i);\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  cout << "I will print" << endl;\n\n  // add last element to the first\n  integers[0] += integers[10]; // This line causes a segmentation fault;\n\n  cout << "I will not print" << endl;\n\n  cout << "Doubled each element" << endl;\n\n  // double each element\n  for (size_t i = 0; i < 10; i++) {\n    integers[i] = integers[i] * 2;\n  }\n\n  // print out each element\n  for (size_t i = 0; i < 10; i++) {\n    cout << integers[i] << endl;\n  }\n\n  return 0;\n}\n\n')),(0,r.kt)("p",null,"When we run this program, we get the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\n$ ./segfault\nAdding 10 elements to the vector\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nI will print\nSegmentation fault (core dumped)\n")),(0,r.kt)("p",null,"Since the program crashes before it prints out the line ",(0,r.kt)("inlineCode",{parentName:"p"},"I will not print"),", but after it prints out the line ",(0,r.kt)("inlineCode",{parentName:"p"},"I will print"),", we know that the line that caused the segmentation fault is ",(0,r.kt)("inlineCode",{parentName:"p"},"integers[0] += integers[10];"),"."),(0,r.kt)("p",null,"By this way of adding print statements to our code, we can find the line of code that caused the segmentation fault."),(0,r.kt)("h3",{id:"using-gdb"},"Using GDB"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"gdb")," prerequisites"),(0,r.kt)("p",{parentName:"admonition"},"If you're not on the lab machines, you'll need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"gdb")," yourself if you haven't already. You can find ",(0,r.kt)("inlineCode",{parentName:"p"},"gdb")," installation instructions in ",(0,r.kt)(i.Z,{to:"/docs/general/info?os=windows#installing-gdb",text:"this guide",mdxType:"LinkWithIcon"}),", and general usage information in our ",(0,r.kt)(i.Z,{to:"/docs/debugging/gdb",text:"gdb guide",mdxType:"LinkWithIcon"}),".")),(0,r.kt)("p",null,"The best way to debug trickier segmentation faults is to use GDB. GDB is a debugger that allows you to step through your program line-by-line and inspect the state of your program at any point. You can use GDB to find the line of code that caused the segmentation fault."),(0,r.kt)("p",null,"To use GDB, first compile your program with debugging symbols:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ g++ -g segfault.cpp -o segfault\n")),(0,r.kt)("p",null,"Then, run GDB on your program:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ gdb segfault\n")),(0,r.kt)("p",null,"GDB will start and you will be dropped into a GDB prompt. To run your program, type ",(0,r.kt)("inlineCode",{parentName:"p"},"run"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) run\nStarting program: /home/username/segfault\n[Inferior 1 (process 12345) exited normally]\n")),(0,r.kt)("p",null,"The program exited normally, but we didn't see any output. This is because GDB is running your program in a separate process, so it is not printing the output to the terminal. To print the output, type ",(0,r.kt)("inlineCode",{parentName:"p"},"print"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) print\n$1 = 0\n")),(0,r.kt)("p",null,"The output is ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", which is the return value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function. To print the output of the program, we need to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"printf")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <stdio.h>\n\nint main() {\n    int *p = NULL;\n    *p = 5;\n    printf("%d\\n", *p);\n    return 0;\n}\n')),(0,r.kt)("p",null,"Now, when we run GDB, we see the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) run\nStarting program: /home/username/segfault\n5\n[Inferior 1 (process 12345) exited normally]\n")),(0,r.kt)("p",null,"The program exited normally, but we still didn't see the segmentation fault. To see the segmentation fault, we need to tell GDB to stop when the program encounters a segmentation fault. To do this, type ",(0,r.kt)("inlineCode",{parentName:"p"},"handle SIGSEGV nostop"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) handle SIGSEGV nostop\nSignal        Stop  Print   Pass to program Description\nSIGSEGV       No    Yes Yes     segmentation fault\n")),(0,r.kt)("p",null,"Now, when we run GDB, we see the segmentation fault:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) run\nStarting program: /home/username/segfault\n5\nProgram received signal SIGSEGV, Segmentation fault.\n0x00005555555551a0 in main () at segfault.cpp:5\n5       *p = 5;\n")),(0,r.kt)("p",null,"The program crashed on line 5 of ",(0,r.kt)("inlineCode",{parentName:"p"},"segfault.cpp"),", which is the line that caused the segmentation fault. To see the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),", type ",(0,r.kt)("inlineCode",{parentName:"p"},"print p"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) print p\n$1 = (int *) 0x0\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"p")," is a null pointer, so it is not allowed to access the memory location that it points to. To see the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"*p"),", type ",(0,r.kt)("inlineCode",{parentName:"p"},"print *p"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) print *p\nCannot access memory at address 0x0\n")))}c.isMDXComponent=!0}}]);