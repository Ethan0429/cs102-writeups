"use strict";(self.webpackChunkcosc_102_writeups=self.webpackChunkcosc_102_writeups||[]).push([[2214],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(y,l(l({ref:t},c),{},{components:a})):n.createElement(y,l({ref:t},c))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9031:(e,t,a)=>{a.d(t,{Z:()=>c});var n,r,i=a(7294),l=a(6010),o=a(9960);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},s.apply(this,arguments)}const p=e=>{let{title:t,titleId:a,...l}=e;return i.createElement("svg",s({fill:"#fff",width:15,height:15,viewBox:"0 0 64 64",xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",style:{fillRule:"evenodd",clipRule:"evenodd",strokeLinejoin:"round",strokeMiterlimit:2},"aria-labelledby":a},l),t?i.createElement("title",{id:a},t):null,i.createElement("path",{style:{fill:"none"},d:"M-896 0H384v800H-896z"}),n||(n=i.createElement("path",{d:"M36.026 20.058H14.934a2.99 2.99 0 0 0-2.989 2.989v25.964A2.99 2.99 0 0 0 14.934 52h26.024a2.99 2.99 0 0 0 2.989-2.989V28.058h3.999v21.948a5.999 5.999 0 0 1-5.995 5.995h-28.01a5.998 5.998 0 0 1-5.995-5.995V22.052a5.997 5.997 0 0 1 5.995-5.995h22.085v4.001Z"})),r||(r=i.createElement("path",{d:"M55.925 25.32H51.92V14.839L24.026 42.732 21.194 39.9l27.895-27.895H38.605V8h17.318l.002.001V25.32Z"})))};function c(e){let{to:t,text:a,className:n}=e;return i.createElement(o.Z,{to:t,className:(0,l.Z)("group",n)},a,i.createElement(p,{className:"ml-0.5 translate-y-0.5 group-hover:fill-[#00ff37]"}))}},6965:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905)),i=a(9031);const l={sidebar_position:2},o="Data Types",s={unversionedId:"references/general/data-types",id:"references/general/data-types",title:"Data Types",description:"The various data types in C++",source:"@site/docs/references/general/data-types.mdx",sourceDirName:"references/general",slug:"/references/general/data-types",permalink:"/cs102-writeups/docs/references/general/data-types",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"Sidebar",previous:{title:"Variable",permalink:"/cs102-writeups/docs/references/general/variable"},next:{title:"Function",permalink:"/cs102-writeups/docs/references/general/function"}},p={},c=[{value:"Summary",id:"summary",level:2},{value:"Primitive Data Types",id:"primitive-data-types",level:2},{value:"Arrays",id:"arrays",level:3},{value:"Example",id:"example",level:4},{value:"Const",id:"const",level:3},{value:"Example",id:"example-1",level:4},{value:"Derived Data Types",id:"derived-data-types",level:2}],d={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-types"},"Data Types"),(0,r.kt)("p",null,"The various data types in C++"),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"In C++, ",(0,r.kt)(i.Z,{to:"./variable",text:"variables",mdxType:"LinkWithIcon"})," and ",(0,r.kt)(i.Z,{to:"./function",text:"functions",mdxType:"LinkWithIcon"})," are declared with a data type. The data type determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable."),(0,r.kt)("p",null,"C++ is composed of ",(0,r.kt)("a",{parentName:"p",href:"#primitive-data-types"},"primitive")," data types, which are built into the language, and ",(0,r.kt)("a",{parentName:"p",href:"#derived-data-types"},"derived")," data types, which are defined in terms of primitive types."),(0,r.kt)("h2",{id:"primitive-data-types"},"Primitive Data Types"),(0,r.kt)("p",null,"The primitive data types in C++ are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"char")," - a single byte, typically used for ",(0,r.kt)(i.Z,{to:"https://www.w3schools.com/charsets/ref_html_ascii.asp",text:"ASCII characters",mdxType:"LinkWithIcon"}),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int")," - a signed (positive/negative) integer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"float")," - decimal numbers with small precision."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"double")," - decimal numbers with large precision."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool")," - A ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"void")," - a special type that indicates that a function does not return a value.")),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("p",null,"Every data type can also be an array. An array is a collection of values of the same type. For example, an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," values is an array of integers."),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int myArray[5]; // array of 5 integers\n\nmyArray[0] = 1; // set the first element to 1\nmyArray[1] = 2; // set the second element to 2\n")),(0,r.kt)("p",null,"The size of an array must be known at compile time. This means that you cannot create an array of a size that is determined at runtime. For example, you cannot do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int size = 5;\n// This will error\nint myArray[size]; // error: size must be a constant/literal\n")),(0,r.kt)("h3",{id:"const"},"Const"),(0,r.kt)("p",null,"Every data type can also be a ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," is a value that cannot be changed. For example, you can declare a ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," integer:"),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"const int myConst = 5;\n")),(0,r.kt)("p",null,"This means the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"myConst")," cannot be changed and that it must be initialized when it is declared. In general, you should use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," whenever possible."),(0,r.kt)("h2",{id:"derived-data-types"},"Derived Data Types"),(0,r.kt)("p",null,"Derived data types can be anything. They are user-defined types. But C++ has a couple that you will use a lot:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.Z,{to:"../string",text:"std::string",mdxType:"LinkWithIcon"})),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(i.Z,{to:"../vector",text:"std::vector",mdxType:"LinkWithIcon"}))))}u.isMDXComponent=!0}}]);