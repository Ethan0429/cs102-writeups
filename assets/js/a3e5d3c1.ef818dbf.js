"use strict";(self.webpackChunkcosc_102_writeups=self.webpackChunkcosc_102_writeups||[]).push([[6559],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},209:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},s="std::cout",i={unversionedId:"references/cout",id:"references/cout",title:"std::cout",description:"Used to output text to the console.",source:"@site/docs/references/cout.md",sourceDirName:"references",slug:"/references/cout",permalink:"/cs102-writeups/docs/references/cout",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"Sidebar",previous:{title:"Scope",permalink:"/cs102-writeups/docs/references/general/scope"},next:{title:"In progress",permalink:"/cs102-writeups/docs/references/string"}},l={},c=[{value:"Summary",id:"summary",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Usage/Syntax",id:"usagesyntax",level:2},{value:"General syntax",id:"general-syntax",level:3},{value:"examples",id:"examples",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"stdcout"},"std::cout"),(0,a.kt)("p",null,"Used to output text to the console."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"std::cout")," is an ",(0,a.kt)("em",{parentName:"p"},"object")," that represents the console output stream. It is generally used whenever you want to output text to the console."),(0,a.kt)("admonition",{title:"Objects",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Objects are instances of a class. They are used to represent things in the real world. For example, a ",(0,a.kt)("inlineCode",{parentName:"p"},"std::string")," object represents a string of characters. A ",(0,a.kt)("inlineCode",{parentName:"p"},"std::vector")," object represents a vector of elements. A ",(0,a.kt)("inlineCode",{parentName:"p"},"std::cout")," object represents the console output stream. In this case, ",(0,a.kt)("inlineCode",{parentName:"p"},"cout")," is an object of the ",(0,a.kt)("inlineCode",{parentName:"p"},"std::ostream")," class.")),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#include <iostream>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"using namespace std;")," (optional)")),(0,a.kt)("admonition",{title:"Namespaces",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Namespaces are used to organize code. They are used to prevent naming conflicts. For example, if you have a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"print")," in your code, and you also have a variable called ",(0,a.kt)("inlineCode",{parentName:"p"},"print"),", then the compiler will not know which one you are referring to. To prevent this, you can put your function in a namespace. For example, you can put your function in the ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," namespace. Then, you can refer to your function as ",(0,a.kt)("inlineCode",{parentName:"p"},"std::print"),". This way, the compiler knows that you are referring to the function and not the variable.")),(0,a.kt)("h2",{id:"usagesyntax"},"Usage/Syntax"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"std::cout")," is followed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"<<")," (insertion) operator, which is followed by an expression. This pattern can be repeated as many times as you want. The expression can be a string literal, a variable, and more."),(0,a.kt)("h3",{id:"general-syntax"},"General syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::cout << <expression> << <expression> << ... << <expression>;\n")),(0,a.kt)("h3",{id:"examples"},"examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// expression is a string literal\nstd::cout << "Hello, world!" << std::endl;\n\n// multiple expressions\nstd::cout << "Hello, " << "world!" << std::endl;\n\n// expression is a variable\nstd::string name = "John";\nstd::cout << "Hello, " << name << "!" << std::endl;\n\n// expression is a function call that returns a string\nstd::string get_name() { /* returns a name string */\n    return "John";\n}\n\nstd::cout << "Hello, " << get_name() << "!" << std::endl;\n')))}u.isMDXComponent=!0}}]);